#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
"""
ContainerMonitor: Based on pyinotify 0.9.4;
  - Watch instance snapshot path, update link;
  - Watch containers path, update container position data;
  - Statistics;
"""

import os,sys
import time
import threading
import logging
import logging.config
import re

from pyinotify import (WatchManager, 
        Notifier, 
        EventsCodes, 
        Stats, 
        ThreadedNotifier, 
        ExcludeFilter)

LIB_PATH = os.path.split(os.getcwd())[0]
sys.path.append(LIB_PATH)

from config.conf_common import CONFIG_COMMON
from config.conf_bns import CONFIG_BNS
from config.conf_etcd import  CONFIG_ETCD

from monitor.bns.worker import Monitor4BNS
from monitor.etcd.worker import Monitor4ETCD
from monitor.etcd.error import MonitorException
from monitor.etcd.sync_timer import SyncTimer


log_conf = CONFIG_COMMON['log_conf']
logging.config.fileConfig(log_conf)
cmlogger = logging.getLogger("container_monitor")

CONFIG_BNS.update(CONFIG_COMMON)
CONFIG_ETCD.update(CONFIG_COMMON)

#Container Monitor process create, delete, move events;
eventscodes = EventsCodes.FLAG_COLLECTIONS['OP_FLAGS']

mask = eventscodes['IN_DELETE'] | \
       eventscodes['IN_CREATE'] | \
       eventscodes['IN_MOVED_TO']

#Create dea snapshot notifier;
snapshot_wm = WatchManager()
snapshot_stats = Stats()
snapshot_notifier = ThreadedNotifier(snapshot_wm, Monitor4BNS(
    snapshot_stats,
    logger=cmlogger,
    config=CONFIG_BNS))
snapshot_notifier.start()

#Exclude filelist specified in `white_list` 
snapshot_excl = ExcludeFilter(CONFIG_BNS['white_list'])
snapshot_wm.add_watch(CONFIG_BNS['monitor_dir'], mask, exclude_filter=snapshot_excl)

#Create containers notifier
container_wm = WatchManager()
container_stats = Stats()
container_notifier = ThreadedNotifier(container_wm, Monitor4ETCD(
    container_stats,
    logger=cmlogger,
    config=CONFIG_ETCD))
container_notifier.start()

#Exclude filelist specified in `white_list`
container_excl = ExcludeFilter(CONFIG_ETCD['white_list'])
container_wm.add_watch(CONFIG_ETCD['monitor_dir'], mask, exclude_filter=container_excl)

#The database should be refreshed periodically by events of test directories;
#add sync timers to do these periodic tasks;
#'cm-test': trigger for update etcd database;
#'collector-test': trigger for update collector database;
sync_times = []
test_dir = CONFIG_ETCD['base_data_path'] + '/' + 'cm-test'
etcd_timer = SyncTimer(cmlogger, test_dir, CONFIG_ETCD['etcd_periodic'])
sync_times.append(etcd_timer)

if CONFIG_ETCD['collector_enabled']:
    test_dir_col = CONFIG_ETCD['base_data_path'] + '/' + 'collector-test'
    collector_timer = SyncTimer(cmlogger, test_dir_col, CONFIG_ETCD['collector_periodic'])
    sync_times.append(collector_timer)

for timer in sync_times:
    timer.start()

#Create stat thread here;
create_events = 0
while True:
    try:
        time.sleep(CONFIG_ETCD['stat_periodic'])
        cmlogger.debug('[Monitor4ETCD] [STAT]: {}'.format(repr(container_stats)))
        cmlogger.debug('[Monitor4BNS] [STAT]: {}'.format(repr(snapshot_stats)))
        create_events_pre = create_events
        create_events_group = re.findall(r'IN_CREATE=([0-9]+)',repr(container_stats))
        if (not create_events_group) or len(create_events_group) > 0:
            create_events = int(create_events_group[0])
            delta = create_events - create_events_pre
            if delta == 0:
                raise MonitorException("CM EVENTS LOST")
        else:
            raise MonitorException("NO EVENTS DETECTED")
    except KeyboardInterrupt:
        print "User stopped."
        snapshot_notifier.stop()
        container_notifier.stop()
        sys.exit(0)
    except MonitorException:
        print "Montinor exception, exiting.."
        sys.exit(1)
    except:
        print "Exception occured.."
        sys.exit(1)
